---
import { type CollectionEntry, getCollection, render } from "astro:content";
import BaseLayout from "../../layouts/BaseLayout.astro";
import Button from "../../components/Button.astro";
import FormattedDate from "../../components/FormattedDate.astro";
import PostPreview from "../../components/PostPreview.astro";
import { sortItemsByDateDesc, calculateReadingTime, filterDrafts } from "../../utils/data-utils";
import { slugify } from "../../utils/common-utils";
import "remark-github-blockquote-alert/alert.css";

export async function getStaticPaths() {
    const posts = filterDrafts(await getCollection("blog")).sort(sortItemsByDateDesc);
    const postCount = posts.length;
    return posts.map((post, index) => ({
        params: { id: post.id },
        props: {
            post,
            prevPost: index + 1 !== postCount ? posts[index + 1] : null,
            nextPost: index !== 0 ? posts[index - 1] : null
        }
    }));
}

type Props = { post: CollectionEntry<"blog">; prevPost: CollectionEntry<"blog">; nextPost: CollectionEntry<"blog"> };

const { href } = Astro.url;
const { post, prevPost, nextPost } = Astro.props;
const { title, subTitle, publishDate, updatedDate, excerpt, tags = [], seo } = post.data;
const { Content } = await render(post);

const postKeywords = seo?.keywords?.length ? seo.keywords : tags;

// Calculate reading time from the post content
const readingTime = calculateReadingTime(post.body);
---

<BaseLayout
    title={seo?.title ?? title}
    description={seo?.description ?? excerpt}
    image={seo?.image}
    pageType="article"
    publishDate={publishDate}
    updatedDate={updatedDate}
    tags={tags}
    keywords={postKeywords}
    readingTime={readingTime}
    noindex={seo?.noindex ?? false}
    showHeader={false}
>
    <article class="mb-16 sm:mb-24">
        <header class="mb-8">
            <h1 class="font-serif text-3xl font-medium leading-tight sm:text-5xl sm:leading-tight">{title}</h1>
            {subTitle && <p class="font-serif text-xl text-gray-600 dark:text-gray-300">{subTitle}</p>}
            <div class="mt-4 flex flex-wrap items-center gap-4 text-sm text-gray-600 dark:text-gray-300">
                <div class="flex items-center gap-1">
                    <span class="font-medium">Published:</span>
                    <FormattedDate date={publishDate} />
                </div>
                {
                    updatedDate && (
                        <div class="flex items-center gap-1">
                            <span class="font-medium">Updated:</span>
                            <FormattedDate date={updatedDate} />
                        </div>
                    )
                }
                <div class="flex items-center gap-1">
                    <span class="font-medium">Reading time:</span>
                    <span>{readingTime}</span>
                </div>
            </div>
        </header>
        <div class="prose prose-blog max-w-none leading-snug sm:prose-lg">
            <Content />
        </div>
        <div class="mt-8 flex flex-wrap items-center justify-between gap-6 text-sm sm:mt-12 sm:text-base">
            {
                tags.length > 0 && (
                    <div class="flex flex-wrap gap-x-5 gap-y-1 text-sm">
                        {tags.map((tag) => (
                            <a class="text-main hover:underline" href={`/tags/${slugify(tag)}`}>
                                #{tag}
                            </a>
                        ))}
                    </div>
                )
            }
            <Button
                class="copy-url-button"
                aria-label="Copy link"
                data-url={href}
                data-tooltip-default="Copy link"
                data-tooltip-success="Copied">Share</Button
            >
        </div>
    </article>
    {
        (prevPost || nextPost) && (
            <div class="my-16 sm:my-24">
                <h2 class="mb-12 font-serif text-xl italic sm:mb-16 sm:text-2xl">Read Next</h2>
                {nextPost && <PostPreview post={nextPost} class="mb-10 sm:mb-12" headingLevel="h3" />}
                {prevPost && <PostPreview post={prevPost} class="mb-10 sm:mb-12" headingLevel="h3" />}
            </div>
        )
    }
</BaseLayout>

<script>
    document.addEventListener("astro:page-load", () => {
        const copyUrlButton = document.querySelector(".copy-url-button") as HTMLButtonElement;
        copyUrlButton?.addEventListener("click", async () => {
            await copyUrl(copyUrlButton);
        });

        async function copyUrl(button: HTMLButtonElement) {
            let url = button.getAttribute("data-url") || "";
            let label = button.innerText;

            await navigator.clipboard.writeText(url);

            button.innerText = "Copied";

            setTimeout(() => {
                button.innerText = label;
            }, 2500);
        }
    });
</script>
